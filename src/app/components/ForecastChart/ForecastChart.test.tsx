import { FutureWeatherApiResponse } from "@/types"
import { render } from "@testing-library/react"
import { ForecastChart } from "./ForecastChart"

const mockFutureWeather: FutureWeatherApiResponse = {
	latitude: 56.149773,
	longitude: 10.209183,
	generationtime_ms: 0.08988380432128906,
	utc_offset_seconds: 0,
	timezone: "GMT",
	timezone_abbreviation: "GMT",
	elevation: 16,
	hourly_units: {
		time: "iso8601",
		temperature_2m: "Â°C",
		precipitation: "mm",
		weathercode: "wmo code"
	},
	hourly: {
		time: [
			"2025-05-29T00:00",
			"2025-05-29T01:00",
			"2025-05-29T02:00",
			"2025-05-29T03:00",
			"2025-05-29T04:00",
			"2025-05-29T05:00",
			"2025-05-29T06:00",
			"2025-05-29T07:00",
			"2025-05-29T08:00",
			"2025-05-29T09:00",
			"2025-05-29T10:00",
			"2025-05-29T11:00",
			"2025-05-29T12:00",
			"2025-05-29T13:00",
			"2025-05-29T14:00",
			"2025-05-29T15:00",
			"2025-05-29T16:00",
			"2025-05-29T17:00",
			"2025-05-29T18:00",
			"2025-05-29T19:00",
			"2025-05-29T20:00",
			"2025-05-29T21:00",
			"2025-05-29T22:00",
			"2025-05-29T23:00",
			"2025-05-30T00:00",
			"2025-05-30T01:00",
			"2025-05-30T02:00",
			"2025-05-30T03:00",
			"2025-05-30T04:00",
			"2025-05-30T05:00",
			"2025-05-30T06:00",
			"2025-05-30T07:00",
			"2025-05-30T08:00",
			"2025-05-30T09:00",
			"2025-05-30T10:00",
			"2025-05-30T11:00",
			"2025-05-30T12:00",
			"2025-05-30T13:00",
			"2025-05-30T14:00",
			"2025-05-30T15:00",
			"2025-05-30T16:00",
			"2025-05-30T17:00",
			"2025-05-30T18:00",
			"2025-05-30T19:00",
			"2025-05-30T20:00",
			"2025-05-30T21:00",
			"2025-05-30T22:00",
			"2025-05-30T23:00",
			"2025-05-31T00:00",
			"2025-05-31T01:00",
			"2025-05-31T02:00",
			"2025-05-31T03:00",
			"2025-05-31T04:00",
			"2025-05-31T05:00",
			"2025-05-31T06:00",
			"2025-05-31T07:00",
			"2025-05-31T08:00",
			"2025-05-31T09:00",
			"2025-05-31T10:00",
			"2025-05-31T11:00",
			"2025-05-31T12:00",
			"2025-05-31T13:00",
			"2025-05-31T14:00",
			"2025-05-31T15:00",
			"2025-05-31T16:00",
			"2025-05-31T17:00",
			"2025-05-31T18:00",
			"2025-05-31T19:00",
			"2025-05-31T20:00",
			"2025-05-31T21:00",
			"2025-05-31T22:00",
			"2025-05-31T23:00",
			"2025-06-01T00:00",
			"2025-06-01T01:00",
			"2025-06-01T02:00",
			"2025-06-01T03:00",
			"2025-06-01T04:00",
			"2025-06-01T05:00",
			"2025-06-01T06:00",
			"2025-06-01T07:00",
			"2025-06-01T08:00",
			"2025-06-01T09:00",
			"2025-06-01T10:00",
			"2025-06-01T11:00",
			"2025-06-01T12:00",
			"2025-06-01T13:00",
			"2025-06-01T14:00",
			"2025-06-01T15:00",
			"2025-06-01T16:00",
			"2025-06-01T17:00",
			"2025-06-01T18:00",
			"2025-06-01T19:00",
			"2025-06-01T20:00",
			"2025-06-01T21:00",
			"2025-06-01T22:00",
			"2025-06-01T23:00",
			"2025-06-02T00:00",
			"2025-06-02T01:00",
			"2025-06-02T02:00",
			"2025-06-02T03:00",
			"2025-06-02T04:00",
			"2025-06-02T05:00",
			"2025-06-02T06:00",
			"2025-06-02T07:00",
			"2025-06-02T08:00",
			"2025-06-02T09:00",
			"2025-06-02T10:00",
			"2025-06-02T11:00",
			"2025-06-02T12:00",
			"2025-06-02T13:00",
			"2025-06-02T14:00",
			"2025-06-02T15:00",
			"2025-06-02T16:00",
			"2025-06-02T17:00",
			"2025-06-02T18:00",
			"2025-06-02T19:00",
			"2025-06-02T20:00",
			"2025-06-02T21:00",
			"2025-06-02T22:00",
			"2025-06-02T23:00",
			"2025-06-03T00:00",
			"2025-06-03T01:00",
			"2025-06-03T02:00",
			"2025-06-03T03:00",
			"2025-06-03T04:00",
			"2025-06-03T05:00",
			"2025-06-03T06:00",
			"2025-06-03T07:00",
			"2025-06-03T08:00",
			"2025-06-03T09:00",
			"2025-06-03T10:00",
			"2025-06-03T11:00",
			"2025-06-03T12:00",
			"2025-06-03T13:00",
			"2025-06-03T14:00",
			"2025-06-03T15:00",
			"2025-06-03T16:00",
			"2025-06-03T17:00",
			"2025-06-03T18:00",
			"2025-06-03T19:00",
			"2025-06-03T20:00",
			"2025-06-03T21:00",
			"2025-06-03T22:00",
			"2025-06-03T23:00",
			"2025-06-04T00:00",
			"2025-06-04T01:00",
			"2025-06-04T02:00",
			"2025-06-04T03:00",
			"2025-06-04T04:00",
			"2025-06-04T05:00",
			"2025-06-04T06:00",
			"2025-06-04T07:00",
			"2025-06-04T08:00",
			"2025-06-04T09:00",
			"2025-06-04T10:00",
			"2025-06-04T11:00",
			"2025-06-04T12:00",
			"2025-06-04T13:00",
			"2025-06-04T14:00",
			"2025-06-04T15:00",
			"2025-06-04T16:00",
			"2025-06-04T17:00",
			"2025-06-04T18:00",
			"2025-06-04T19:00",
			"2025-06-04T20:00",
			"2025-06-04T21:00",
			"2025-06-04T22:00",
			"2025-06-04T23:00"
		],
		temperature_2m: [
			10.1, 9.6, 9.5, 9.1, 9.1, 9.8, 10.9, 12.2, 13.6, 15.3, 16, 17.5, 18.3,
			18.5, 17.9, 17.4, 16.4, 15.3, 14.5, 13.3, 12.8, 12.8, 12.9, 13.3, 13.5,
			13.8, 14.1, 14.3, 14.3, 14.3, 14.5, 15, 16.2, 17.2, 17.8, 17.8, 17.1,
			16.6, 16, 15.4, 15.4, 15.5, 15.5, 15.3, 14.9, 14.7, 14.2, 13.9, 13.5,
			13.1, 12.8, 12.5, 12.5, 12.5, 13, 14.1, 14.9, 16.1, 17.8, 19.2, 20.5,
			21.3, 21.6, 21.4, 20.8, 20.4, 19.5, 18.5, 17.2, 16.2, 14.9, 14.5, 13.8,
			13.3, 11.1, 11.5, 12.4, 13.5, 14.6, 15.3, 15.9, 16.6, 17.6, 18.6, 19.2,
			19.4, 19, 18.4, 17.4, 16, 14.8, 13.6, 12.5, 11.6, 11.2, 11, 10.9, 10.8,
			10.7, 10.8, 11.3, 12, 12.8, 13.6, 14.6, 15.2, 15.6, 15.6, 15.6, 15.8,
			15.8, 15.5, 14.8, 13.7, 12.7, 11.9, 11.2, 10.6, 10.1, 9.6, 9.2, 8.7, 8.3,
			8.2, 8.8, 9.8, 10.7, 11.7, 12.7, 13.5, 14.1, 14.4, 14.6, 14.8, 14.8, 14.8,
			14.9, 14.9, 14.8, 14.4, 13.9, 13.7, 14.1, 14.6, 14.7, 13.9, 12.8, 12,
			12.1, 12.8, 13.4, 14.1, 14.8, 15.4, 15.9, 16.1, 16.3, 16.3, 16.1, 15.9,
			15.6, 15.1, 14.6, 13.8, 12.9, 11.9, 11.2, 10.6
		],
		precipitation: [
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0.1, 0.5,
			0.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.5, 0.3, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.3, 0.3, 0.1, 0.1, 0.1, 0.7, 0.7, 0.7,
			0.1, 0.1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0.2, 0.2, 0.8,
			0.8, 0.8, 1, 1, 1, 0.2, 0.2, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.1, 0.1, 1.3, 1.3, 1.3, 0, 0, 0, 0,
			0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		],
		weathercode: [
			0, 1, 2, 1, 2, 2, 2, 0, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 51, 51, 53,
			53, 3, 3, 3, 3, 2, 3, 3, 3, 2, 2, 3, 3, 3, 51, 53, 51, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 51, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2,
			3, 3, 2, 3, 3, 3, 3, 3, 3, 51, 51, 51, 51, 51, 51, 53, 53, 53, 51, 51, 51,
			0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 51, 51, 51, 53, 53, 53, 55, 55, 55,
			51, 51, 51, 0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 2, 1, 1, 0, 1, 1, 2, 3, 3, 2, 2,
			2, 2, 2, 51, 51, 51, 61, 61, 61, 2, 1, 0, 0, 0, 1, 51, 51, 51, 51, 51, 51,
			0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0
		]
	}
}

beforeAll(() => {
	global.ResizeObserver = class {
		observe() {}
		unobserve() {}
		disconnect() {}
	}
	if (typeof window !== "undefined") {
		// @ts-ignore
		window.ResizeObserver = global.ResizeObserver
		window.console.warn = () => {}
		window.console.error = () => {}
	}
})

describe("ForecastChart", () => {
	it("should match snapshot", () => {
		const { baseElement } = render(
			<ForecastChart futureWeather={mockFutureWeather} />
		)
		expect(baseElement).toMatchSnapshot()
	})
	it("renders without crashing", () => {
		const { getByTestId } = render(
			<ForecastChart futureWeather={mockFutureWeather} />
		)
		expect(getByTestId("forecast-chart")).toBeInTheDocument()
	})
})
